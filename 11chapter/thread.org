#+startup: indent
#+TITLE: thread

* pthread macro

#+BEGIN_SRC cpp
#include <unistd.h>
#ifdef _POSIX_THREADS
#include <pthread.h>
#endif
#+END_SRC

* Thread Identification

线程ID：用来标示一个进程中的单独的线程。 *pthread_t* 可移植程序中，该类型不能假设为一个整形。

** 线程ID比较
#+BEGIN_SRC cpp
int pthread_equal(pthred_t tid1, pthread_t tid2);
Returns: nonzero if equal, 0 otherwise.
#+END_SRC

** 线程ID获得
#+BEGIN_SRC cpp
pthread_t ptrhead_self(void);
#+END_SRC

* 线程创建

#+BEGIN_SRC cpp
int pthread_create(pthread_t * restrict tidp,
const pthred_attr_t *restrict attr,
void *(*start_rtn)(void *), void * restrict arg);

#+END_SRC

* 线程销毁

- 线程主动调用return，正常返回
- 被别的线程结束
- 自动调用 *pthread_exit*

#+BEGIN_SRC cpp
void ptrhead_eixt(void *rval_ptr);
#+END_SRC

其中 *rval_ptr* 为返回的指针，其他线程可以调用

#+BEGIN_SRC cpp
int pthread_join(pthread_t thread, void **rval_ptr);
#+END_SRC

阻塞知道，thread的线程调用pthread_exit结束或者取消。 如果为取消，则rval_ptr指向的内存空间存储的为PTHREAD_CANCELED.

** 线程取消

#+BEGIN_SRC cpp
int pthread_cancel(pthread_t tid);
#+END_SRC



* 线程同步

多线程共享进程的所有内存及资源，保证一致性，需要线程间同步。

** Mutex

#+BEGIN_SRC cpp
动态初始化
int pthread_mutex_init(pthread_mutex_t * restrict mutex,
const pthread_mutexattr_t * restrict attr);

静态初始化
mutex = PTHREAD_MUTEX_INITIALIZER;

int pthread_mutex_desctroy(pthread_mutex_t * mutex);
#+END_SRC

#+BEGIN_SRC cpp
int pthread_mutex_lock(pthread_mutex_t * mutex);

int pthread_mutex_trylock(pthread_mutex_t * mutex);

int pthread_mutex_unlock(pthread_mutex_t * mutex);
#+END_SRC

*** 带时间的lock

#+BEGIN_SRC cpp
int pthread_mutex_timedlock(pthread_mutex_t * restrict mutex
const struct timespec * restrict tsptr);

return: 0 if ok, error number on failure.
#+END_SRC

如果超时，将返回*ETIMEDOUT*。

** 读写锁

读写锁有三种状态：读锁，写锁，未锁。

多个线程可以锁在读锁，每次只有一个线程能够锁在写锁。


#+BEGIN_SRC cpp
int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,
const pthread_rwlockattr_t *restrict attr);

int pthread_rwlock_desctroy(pthread_rwlock_t *rwlock);
#+END_SRC

#+BEGIN_SRC cpp
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);

int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);

int pthread_rwlock_timedrwlock(pthread_rwlock_t *lock,
const struct timespec *restrict tsptr);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *lock,
const struct timespec *restrict tsptr);
#+END_SRC


* 条件变量

条件变量和mutex一起使用，只有能够mutex锁店后，才能使用。

** 初始化

#+BEGIN_SRC cpp

int pthread_cond_init(pthread_cond_t * restrict cond,
const pthread_condattr_t * restrict attr);
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
int pthread_cond_destroy(pthread_cond_t * cond);

#+END_SRC

** 等待条件变量

#+BEGIN_SRC cpp

int pthread_cond_wait(pthread_cond_t * restrict cond,
pthread_mutex_t * restrict mutex);

int pthread_cond_timewait(pthread_cond_t * restrict cond,
pthread_mutex_t * restrict mutex,
const struct timespec * restrict tsptr);

#+END_SRC

将等待该条件变量的线程放在等待列表上，并释放该mutex。

当该wait返回时，mutex自动被锁定。

当pthread_cond_timewait超时后，将会重新获得该mutex的锁定，并返回ETIMEOUT。

** 唤起条件变量上的线程

#+BEGIN_SRC cpp
int pthread_cond_signal(pthread_cond_t * cond);
int pthread_cond_broadcast(pthread_cond_t * cond);
#+END_SRC

* 自旋锁 Spin lock

Spin lock 并不像mutex，阻塞线程后，线程去休眠。自旋锁使用 忙等待spining来阻塞线程。用在多处理器，并且短时间锁定。

* 屏障 barriers

屏障能够使得每个线程都到达一个状态后，才一起执行。

#+BEGIN_SRC cpp
int pthread_barrier_init(pthread_barrier_t * restrict barrier,
const pthread_barrierattr_t * restrict attr,
unsigned int count);
int pthread_barrier_destroy(pthread_barrier_t * barrier);
#+END_SRC

*count* : 标示必须有多少个thread到达该barrier后，所有的thread才能继续运行。

#+BEGIN_SRC cpp
int pthread_barrier_wait(pthread_barrier_t * restruct barrier);
#+END_SRC

标示该thread已经到达，等待别的线程。







